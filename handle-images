import glob, hashlib, os, cv2, json,datetime,time
from multiprocessing import Pool

class HandlerImage(object):
    '''
    将图片的文件夹进行复制，并将大图修改成大小固定的尺寸的图，并进行md5重命名，并形成对应的json文件，为以后的标注工作作铺垫。
    '''
    def __init__(self,dicts):
        self.dicts = dicts

    def get_md5(self, path):
        # 对文件内容进行md5加密输出
        try:
            with open(path, 'rb') as f:
                md5obj = hashlib.md5()
                md5obj.update(f.read())
                hash = md5obj.hexdigest()
                return hash
        except Exception as e:
            pass

    def new_image_path(self, path, old_file_name):
        l = []
        # 新的文件夹的全路径
        new_path_start = '/'.join(path.replace(old_file_name,old_file_name+'MapSmall').split('.')[0:-1][0].split('/')[0:-1])
        l.append(new_path_start)
        # 新的图片的名称
        new_name = os.path.basename(path).split('.')[0] + '|Map|' + self.get_md5(path) + '.jpg'
        l.append(new_name)
        if '' in l:
            l.remove('')
        new_path = '/'.join(l)
        return new_path

    def json_content(self,path,new_path):
        # 写入json文件的内容
        json_dict ={}
        json_dict[path] = new_path
        return json_dict

    def get_json_path(self,new_path):
        # 切割并获取到json文件的路径
        a = []
        json_path = '/'.join(new_path.split('.')[0].split('/')[0:-1])
        file = new_path.split('.')[0].split('/')[:-1][-1]
        a.append(json_path)
        a.append(file)
        json_path = '/'.join(a) + '.json'
        return json_path

    def judge_image_new_path(self,new_path):
        # 文件夹不存在时，进行创建
        new_folder = '/'.join(new_path.split('.')[0].split('/')[0:-1])
        if not os.path.exists(new_folder):
            try:
                os.makedirs(new_folder)
            except Exception as e:
                print(e)

    def image_resize(self, path,new_path):
        # 对image进行resize
        try:
            res = cv2.resize(cv2.imread(path), (320, 240), interpolation=cv2.INTER_CUBIC)
            cv2.waitKey(0)
            cv2.imwrite(new_path, res)
            cv2.destroyAllWindows()
        except Exception as e:
            pass


    def write_json(self,path,new_path):
        # 写入dict，由于文件分为创建和存在，他们写入的内容并不相同
        json_path = self.get_json_path(new_path)
        json_dict = self.json_content(path,new_path)
        self.dicts = json_dict
        try:
            with open(json_path,'a',encoding='utf-8') as f:
                if not os.path.exists(json_path):
                    json.dump(self.dicts,f)
                    f.write(',')
                    f.write('\n')
                    print('创建时插入:', json_dict)
                else:
                    json.dump(self.dicts, f)
                    f.write(',')
                    f.write('\n')
                    print('存在时插入：', json_dict)

        except Exception as e:
            print(e)
        finally:
            self.dicts = {}


def func(path,hand,old_file_name):
    new_path = hand.new_image_path(path,old_file_name)
    hand.judge_image_new_path(new_path)
    hand.image_resize(path,new_path)
    hand.write_json(path,new_path)



if __name__ == '__main__':
    image_path_list = glob.glob(r'/Users/liudonggang/PycharmProjects/work/handlerimages/**/*.jpg', recursive=True)
    old_file_name = input('请输入原有的文件夹名称(注：只是即将操作的一个问价夹，并不是文件的全路径！！！)：')
    hand = HandlerImage(dicts={})
    p = Pool()
    t1 = time.time()
    for path in image_path_list:
        p.apply_async(func, args=(path,hand,old_file_name))
    p.close()
    p.join()
    t2 = time.time()
    print('操作完成！')
    print('耗时：',t2-t1)
    # 统计图片数量
    print(len(image_path_list))
